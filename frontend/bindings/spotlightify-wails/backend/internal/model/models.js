// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class Action {
    /**
     * Creates a new Action instance.
     * @param {Partial<Action>} [$$source = {}] - The source object to create the Action.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {CommandOptions | null | undefined}
             */
            this["commandOptions"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {PromptState | null | undefined}
             */
            this["promptState"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {ExecuteAction | null | undefined}
             */
            this["executeAction"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Action instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Action}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType1;
        const $$createField1_0 = $$createType3;
        const $$createField2_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("commandOptions" in $$parsedSource) {
            $$parsedSource["commandOptions"] = $$createField0_0($$parsedSource["commandOptions"]);
        }
        if ("promptState" in $$parsedSource) {
            $$parsedSource["promptState"] = $$createField1_0($$parsedSource["promptState"]);
        }
        if ("executeAction" in $$parsedSource) {
            $$parsedSource["executeAction"] = $$createField2_0($$parsedSource["executeAction"]);
        }
        return new Action(/** @type {Partial<Action>} */($$parsedSource));
    }
}

export class Command {
    /**
     * Creates a new Command instance.
     * @param {Partial<Command>} [$$source = {}] - The source object to create the Command.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {CommandID}
             */
            this["id"] = (/** @type {CommandID} */(""));
        }
        if (!("name" in $$source)) {
            /**
             * Text to show on the command's placeholder suggestion
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * Text to show on the command's placeholder suggestion
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("icon" in $$source)) {
            /**
             * Icon to show on the command's placeholder suggestion
             * @member
             * @type {string}
             */
            this["icon"] = "";
        }
        if (!("triggerWord" in $$source)) {
            /**
             * The word that triggers this command
             * @member
             * @type {CommandKeyword}
             */
            this["triggerWord"] = (/** @type {CommandKeyword} */(""));
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {{ [_: string]: string } | undefined}
             */
            this["parameters"] = {};
        }
        if (!("properties" in $$source)) {
            /**
             * @member
             * @type {CommandProperties}
             */
            this["properties"] = (new CommandProperties());
        }
        if (/** @type {any} */(false)) {
            /**
             * Used in frontend to hold prompt text, not needed in backend
             * @member
             * @type {string | undefined}
             */
            this["promptText"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Command instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Command}
     */
    static createFrom($$source = {}) {
        const $$createField5_0 = $$createType6;
        const $$createField6_0 = $$createType7;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("parameters" in $$parsedSource) {
            $$parsedSource["parameters"] = $$createField5_0($$parsedSource["parameters"]);
        }
        if ("properties" in $$parsedSource) {
            $$parsedSource["properties"] = $$createField6_0($$parsedSource["properties"]);
        }
        return new Command(/** @type {Partial<Command>} */($$parsedSource));
    }
}

/**
 * @typedef {string} CommandID
 */

/**
 * @typedef {string} CommandKeyword
 */

export class CommandOptions {
    /**
     * Creates a new CommandOptions instance.
     * @param {Partial<CommandOptions>} [$$source = {}] - The source object to create the CommandOptions.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {Command | null | undefined}
             */
            this["pushCommand"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {Command | null | undefined}
             */
            this["setCommand"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {{ [_: string]: string } | undefined}
             */
            this["setCurrentCommandParameters"] = {};
        }
        if (!("popCommand" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["popCommand"] = false;
        }
        if (!("clearCommandStack" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["clearCommandStack"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CommandOptions instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {CommandOptions}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType9;
        const $$createField1_0 = $$createType9;
        const $$createField2_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("pushCommand" in $$parsedSource) {
            $$parsedSource["pushCommand"] = $$createField0_0($$parsedSource["pushCommand"]);
        }
        if ("setCommand" in $$parsedSource) {
            $$parsedSource["setCommand"] = $$createField1_0($$parsedSource["setCommand"]);
        }
        if ("setCurrentCommandParameters" in $$parsedSource) {
            $$parsedSource["setCurrentCommandParameters"] = $$createField2_0($$parsedSource["setCurrentCommandParameters"]);
        }
        return new CommandOptions(/** @type {Partial<CommandOptions>} */($$parsedSource));
    }
}

export class CommandProperties {
    /**
     * Creates a new CommandProperties instance.
     * @param {Partial<CommandProperties>} [$$source = {}] - The source object to create the CommandProperties.
     */
    constructor($$source = {}) {
        if (!("title" in $$source)) {
            /**
             * The string which appears on the UI when the command is selected
             * @member
             * @type {string}
             */
            this["title"] = "";
        }
        if (!("shorthandTitle" in $$source)) {
            /**
             * The string which appears on the UI when this command is in the command stack, should be one character
             * @member
             * @type {string}
             */
            this["shorthandTitle"] = "";
        }
        if (!("debounceMS" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["debounceMS"] = 0;
        }
        if (!("keepPromptOpen" in $$source)) {
            /**
             * Controls whether the prompt should be kept open while this is the active command, i.e. the prompt won't close on window blur
             * @member
             * @type {boolean}
             */
            this["keepPromptOpen"] = false;
        }
        if (!("placeholderText" in $$source)) {
            /**
             * The string which appears in the prompt when this command is selected
             * @member
             * @type {string}
             */
            this["placeholderText"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CommandProperties instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {CommandProperties}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CommandProperties(/** @type {Partial<CommandProperties>} */($$parsedSource));
    }
}

export class ExecuteAction {
    /**
     * Creates a new ExecuteAction instance.
     * @param {Partial<ExecuteAction>} [$$source = {}] - The source object to create the ExecuteAction.
     */
    constructor($$source = {}) {
        if (!("commandId" in $$source)) {
            /**
             * @member
             * @type {CommandID}
             */
            this["commandId"] = (/** @type {CommandID} */(""));
        }
        if (!("parameters" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: string }}
             */
            this["parameters"] = {};
        }
        if (!("waitTillComplete" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["waitTillComplete"] = false;
        }
        if (!("closeOnSuccess" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["closeOnSuccess"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExecuteAction instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ExecuteAction}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("parameters" in $$parsedSource) {
            $$parsedSource["parameters"] = $$createField1_0($$parsedSource["parameters"]);
        }
        return new ExecuteAction(/** @type {Partial<ExecuteAction>} */($$parsedSource));
    }
}

export class ExecuteActionOutput {
    /**
     * Creates a new ExecuteActionOutput instance.
     * @param {Partial<ExecuteActionOutput>} [$$source = {}] - The source object to create the ExecuteActionOutput.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * Action side effect
             * @member
             * @type {Action | null | undefined}
             */
            this["action"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * SuggestionList side effect
             * @member
             * @type {SuggestionList | null | undefined}
             */
            this["suggestions"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExecuteActionOutput instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ExecuteActionOutput}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType11;
        const $$createField1_0 = $$createType13;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("action" in $$parsedSource) {
            $$parsedSource["action"] = $$createField0_0($$parsedSource["action"]);
        }
        if ("suggestions" in $$parsedSource) {
            $$parsedSource["suggestions"] = $$createField1_0($$parsedSource["suggestions"]);
        }
        return new ExecuteActionOutput(/** @type {Partial<ExecuteActionOutput>} */($$parsedSource));
    }
}

export class PromptState {
    /**
     * Creates a new PromptState instance.
     * @param {Partial<PromptState>} [$$source = {}] - The source object to create the PromptState.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["closePrompt"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {string | null | undefined}
             */
            this["setPromptText"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["preservePromptText"] = false;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {boolean | undefined}
             */
            this["freezePrompt"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PromptState instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PromptState}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PromptState(/** @type {Partial<PromptState>} */($$parsedSource));
    }
}

export class Suggestion {
    /**
     * Creates a new Suggestion instance.
     * @param {Partial<Suggestion>} [$$source = {}] - The source object to create the Suggestion.
     */
    constructor($$source = {}) {
        if (!("title" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["title"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("icon" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["icon"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * unique id for the suggestion, used in frontend to track the suggestion (React)
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("action" in $$source)) {
            /**
             * @member
             * @type {Action | null}
             */
            this["action"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Suggestion instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Suggestion}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType11;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("action" in $$parsedSource) {
            $$parsedSource["action"] = $$createField4_0($$parsedSource["action"]);
        }
        return new Suggestion(/** @type {Partial<Suggestion>} */($$parsedSource));
    }
}

export class SuggestionList {
    /**
     * Creates a new SuggestionList instance.
     * @param {Partial<SuggestionList>} [$$source = {}] - The source object to create the SuggestionList.
     */
    constructor($$source = {}) {
        if (!("items" in $$source)) {
            /**
             * @member
             * @type {Suggestion[]}
             */
            this["items"] = [];
        }
        if (!("filter" in $$source)) {
            /**
             * Static and Filter are mutually exclusive, if both are erroneously set, Filter will take precedence
             * @member
             * @type {boolean}
             */
            this["filter"] = false;
        }
        if (!("static" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["static"] = false;
        }
        if (!("errorOccurred" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["errorOccurred"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SuggestionList instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SuggestionList}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType15;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("items" in $$parsedSource) {
            $$parsedSource["items"] = $$createField0_0($$parsedSource["items"]);
        }
        return new SuggestionList(/** @type {Partial<SuggestionList>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = CommandOptions.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = PromptState.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = ExecuteAction.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = $Create.Map($Create.Any, $Create.Any);
const $$createType7 = CommandProperties.createFrom;
const $$createType8 = Command.createFrom;
const $$createType9 = $Create.Nullable($$createType8);
const $$createType10 = Action.createFrom;
const $$createType11 = $Create.Nullable($$createType10);
const $$createType12 = SuggestionList.createFrom;
const $$createType13 = $Create.Nullable($$createType12);
const $$createType14 = Suggestion.createFrom;
const $$createType15 = $Create.Array($$createType14);
