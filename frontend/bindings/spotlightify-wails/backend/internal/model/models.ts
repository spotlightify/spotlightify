// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class Action {
    "commandOptions"?: CommandOptions | null;
    "promptState"?: PromptState | null;
    "executeAction"?: ExecuteAction | null;

    /** Creates a new Action instance. */
    constructor($$source: Partial<Action> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Action instance from a string or object.
     */
    static createFrom($$source: any = {}): Action {
        const $$createField0_0 = $$createType1;
        const $$createField1_0 = $$createType3;
        const $$createField2_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("commandOptions" in $$parsedSource) {
            $$parsedSource["commandOptions"] = $$createField0_0($$parsedSource["commandOptions"]);
        }
        if ("promptState" in $$parsedSource) {
            $$parsedSource["promptState"] = $$createField1_0($$parsedSource["promptState"]);
        }
        if ("executeAction" in $$parsedSource) {
            $$parsedSource["executeAction"] = $$createField2_0($$parsedSource["executeAction"]);
        }
        return new Action($$parsedSource as Partial<Action>);
    }
}

export class Command {
    "id": CommandID;

    /**
     * Text to show on the command's placeholder suggestion
     */
    "name": string;

    /**
     * Text to show on the command's placeholder suggestion
     */
    "description": string;

    /**
     * Icon to show on the command's placeholder suggestion
     */
    "icon": string;

    /**
     * The word that triggers this command
     */
    "triggerWord": CommandKeyword;
    "parameters"?: { [_: string]: string };
    "properties": CommandProperties;

    /**
     * Used in frontend to hold prompt text, not needed in backend
     */
    "promptText"?: string;

    /** Creates a new Command instance. */
    constructor($$source: Partial<Command> = {}) {
        if (!("id" in $$source)) {
            this["id"] = ("" as CommandID);
        }
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("icon" in $$source)) {
            this["icon"] = "";
        }
        if (!("triggerWord" in $$source)) {
            this["triggerWord"] = ("" as CommandKeyword);
        }
        if (!("properties" in $$source)) {
            this["properties"] = (new CommandProperties());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Command instance from a string or object.
     */
    static createFrom($$source: any = {}): Command {
        const $$createField5_0 = $$createType6;
        const $$createField6_0 = $$createType7;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("parameters" in $$parsedSource) {
            $$parsedSource["parameters"] = $$createField5_0($$parsedSource["parameters"]);
        }
        if ("properties" in $$parsedSource) {
            $$parsedSource["properties"] = $$createField6_0($$parsedSource["properties"]);
        }
        return new Command($$parsedSource as Partial<Command>);
    }
}

export type CommandID = string;

export type CommandKeyword = string;

export class CommandOptions {
    "pushCommand"?: Command | null;
    "setCommand"?: Command | null;
    "setCurrentCommandParameters"?: { [_: string]: string };
    "popCommand": boolean;
    "clearCommandStack": boolean;

    /** Creates a new CommandOptions instance. */
    constructor($$source: Partial<CommandOptions> = {}) {
        if (!("popCommand" in $$source)) {
            this["popCommand"] = false;
        }
        if (!("clearCommandStack" in $$source)) {
            this["clearCommandStack"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CommandOptions instance from a string or object.
     */
    static createFrom($$source: any = {}): CommandOptions {
        const $$createField0_0 = $$createType9;
        const $$createField1_0 = $$createType9;
        const $$createField2_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("pushCommand" in $$parsedSource) {
            $$parsedSource["pushCommand"] = $$createField0_0($$parsedSource["pushCommand"]);
        }
        if ("setCommand" in $$parsedSource) {
            $$parsedSource["setCommand"] = $$createField1_0($$parsedSource["setCommand"]);
        }
        if ("setCurrentCommandParameters" in $$parsedSource) {
            $$parsedSource["setCurrentCommandParameters"] = $$createField2_0($$parsedSource["setCurrentCommandParameters"]);
        }
        return new CommandOptions($$parsedSource as Partial<CommandOptions>);
    }
}

export class CommandProperties {
    /**
     * The string which appears on the UI when the command is selected
     */
    "title": string;

    /**
     * The string which appears on the UI when this command is in the command stack, should be one character
     */
    "shorthandTitle": string;
    "debounceMS": number;

    /**
     * Controls whether the prompt should be kept open while this is the active command, i.e. the prompt won't close on window blur
     */
    "keepPromptOpen": boolean;

    /**
     * The string which appears in the prompt when this command is selected
     */
    "placeholderText": string;

    /** Creates a new CommandProperties instance. */
    constructor($$source: Partial<CommandProperties> = {}) {
        if (!("title" in $$source)) {
            this["title"] = "";
        }
        if (!("shorthandTitle" in $$source)) {
            this["shorthandTitle"] = "";
        }
        if (!("debounceMS" in $$source)) {
            this["debounceMS"] = 0;
        }
        if (!("keepPromptOpen" in $$source)) {
            this["keepPromptOpen"] = false;
        }
        if (!("placeholderText" in $$source)) {
            this["placeholderText"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new CommandProperties instance from a string or object.
     */
    static createFrom($$source: any = {}): CommandProperties {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new CommandProperties($$parsedSource as Partial<CommandProperties>);
    }
}

export class ExecuteAction {
    "commandId": CommandID;
    "parameters": { [_: string]: string };
    "waitTillComplete": boolean;
    "closeOnSuccess": boolean;

    /** Creates a new ExecuteAction instance. */
    constructor($$source: Partial<ExecuteAction> = {}) {
        if (!("commandId" in $$source)) {
            this["commandId"] = ("" as CommandID);
        }
        if (!("parameters" in $$source)) {
            this["parameters"] = {};
        }
        if (!("waitTillComplete" in $$source)) {
            this["waitTillComplete"] = false;
        }
        if (!("closeOnSuccess" in $$source)) {
            this["closeOnSuccess"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExecuteAction instance from a string or object.
     */
    static createFrom($$source: any = {}): ExecuteAction {
        const $$createField1_0 = $$createType6;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("parameters" in $$parsedSource) {
            $$parsedSource["parameters"] = $$createField1_0($$parsedSource["parameters"]);
        }
        return new ExecuteAction($$parsedSource as Partial<ExecuteAction>);
    }
}

export class ExecuteActionOutput {
    /**
     * Action side effect
     */
    "action"?: Action | null;

    /**
     * SuggestionList side effect
     */
    "suggestions"?: SuggestionList | null;

    /** Creates a new ExecuteActionOutput instance. */
    constructor($$source: Partial<ExecuteActionOutput> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ExecuteActionOutput instance from a string or object.
     */
    static createFrom($$source: any = {}): ExecuteActionOutput {
        const $$createField0_0 = $$createType11;
        const $$createField1_0 = $$createType13;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("action" in $$parsedSource) {
            $$parsedSource["action"] = $$createField0_0($$parsedSource["action"]);
        }
        if ("suggestions" in $$parsedSource) {
            $$parsedSource["suggestions"] = $$createField1_0($$parsedSource["suggestions"]);
        }
        return new ExecuteActionOutput($$parsedSource as Partial<ExecuteActionOutput>);
    }
}

export class PromptState {
    "closePrompt"?: boolean;
    "setPromptText"?: string | null;
    "preservePromptText"?: boolean;
    "freezePrompt"?: boolean;

    /** Creates a new PromptState instance. */
    constructor($$source: Partial<PromptState> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PromptState instance from a string or object.
     */
    static createFrom($$source: any = {}): PromptState {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PromptState($$parsedSource as Partial<PromptState>);
    }
}

export class Suggestion {
    "title": string;
    "description": string;
    "icon": string;

    /**
     * unique id for the suggestion, used in frontend to track the suggestion (React)
     */
    "id": string;
    "action": Action | null;

    /** Creates a new Suggestion instance. */
    constructor($$source: Partial<Suggestion> = {}) {
        if (!("title" in $$source)) {
            this["title"] = "";
        }
        if (!("description" in $$source)) {
            this["description"] = "";
        }
        if (!("icon" in $$source)) {
            this["icon"] = "";
        }
        if (!("id" in $$source)) {
            this["id"] = "";
        }
        if (!("action" in $$source)) {
            this["action"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Suggestion instance from a string or object.
     */
    static createFrom($$source: any = {}): Suggestion {
        const $$createField4_0 = $$createType11;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("action" in $$parsedSource) {
            $$parsedSource["action"] = $$createField4_0($$parsedSource["action"]);
        }
        return new Suggestion($$parsedSource as Partial<Suggestion>);
    }
}

export class SuggestionList {
    "items": Suggestion[];

    /**
     * Static and Filter are mutually exclusive, if both are erroneously set, Filter will take precedence
     */
    "filter": boolean;
    "static": boolean;
    "errorOccurred": boolean;

    /** Creates a new SuggestionList instance. */
    constructor($$source: Partial<SuggestionList> = {}) {
        if (!("items" in $$source)) {
            this["items"] = [];
        }
        if (!("filter" in $$source)) {
            this["filter"] = false;
        }
        if (!("static" in $$source)) {
            this["static"] = false;
        }
        if (!("errorOccurred" in $$source)) {
            this["errorOccurred"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SuggestionList instance from a string or object.
     */
    static createFrom($$source: any = {}): SuggestionList {
        const $$createField0_0 = $$createType15;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("items" in $$parsedSource) {
            $$parsedSource["items"] = $$createField0_0($$parsedSource["items"]);
        }
        return new SuggestionList($$parsedSource as Partial<SuggestionList>);
    }
}

// Private type creation functions
const $$createType0 = CommandOptions.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
const $$createType2 = PromptState.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = ExecuteAction.createFrom;
const $$createType5 = $Create.Nullable($$createType4);
const $$createType6 = $Create.Map($Create.Any, $Create.Any);
const $$createType7 = CommandProperties.createFrom;
const $$createType8 = Command.createFrom;
const $$createType9 = $Create.Nullable($$createType8);
const $$createType10 = Action.createFrom;
const $$createType11 = $Create.Nullable($$createType10);
const $$createType12 = SuggestionList.createFrom;
const $$createType13 = $Create.Nullable($$createType12);
const $$createType14 = Suggestion.createFrom;
const $$createType15 = $Create.Array($$createType14);
