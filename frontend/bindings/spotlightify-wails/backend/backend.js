// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as application$0 from "../../github.com/wailsapp/wails/v3/pkg/application/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as spotify$0 from "../../github.com/zmb3/spotify/v2/models.js";
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as model$0 from "./internal/model/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} clientID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddClientID(clientID) {
    let $resultPromise = /** @type {any} */($Call.ByID(3800419158, clientID));
    return $resultPromise;
}

/**
 * @param {string} clientSecret
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AddClientSecret(clientSecret) {
    let $resultPromise = /** @type {any} */($Call.ByID(1340611899, clientSecret));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function AuthenticateWithSpotify() {
    let $resultPromise = /** @type {any} */($Call.ByID(3677210190));
    return $resultPromise;
}

/**
 * @param {string} repeatState
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeRepeatState(repeatState) {
    let $resultPromise = /** @type {any} */($Call.ByID(2256930927, repeatState));
    return $resultPromise;
}

/**
 * @param {boolean} shuffleOn
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ChangeShuffle(shuffleOn) {
    let $resultPromise = /** @type {any} */($Call.ByID(4284328126, shuffleOn));
    return $resultPromise;
}

/**
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function CheckIfAuthenticatedWithSpotify() {
    let $resultPromise = /** @type {any} */($Call.ByID(2307428207));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function CloseAuthServer() {
    let $resultPromise = /** @type {any} */($Call.ByID(813674914));
    return $resultPromise;
}

/**
 * @param {string} commandId
 * @param {{ [_: string]: string }} parameters
 * @returns {Promise<model$0.ExecuteActionOutput> & { cancel(): void }}
 */
export function ExecuteCommand(commandId, parameters) {
    let $resultPromise = /** @type {any} */($Call.ByID(3523822489, commandId, parameters));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<spotify$0.PlayerDevice> & { cancel(): void }}
 */
export function GetActiveDevice() {
    let $resultPromise = /** @type {any} */($Call.ByID(2223992591));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} query
 * @returns {Promise<spotify$0.SimpleAlbum[]> & { cancel(): void }}
 */
export function GetAlbumsByQuery(query) {
    let $resultPromise = /** @type {any} */($Call.ByID(1594357110, query));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} query
 * @returns {Promise<spotify$0.FullArtist[]> & { cancel(): void }}
 */
export function GetArtistsByQuery(query) {
    let $resultPromise = /** @type {any} */($Call.ByID(2843076772, query));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetClientID() {
    let $resultPromise = /** @type {any} */($Call.ByID(1833178989));
    return $resultPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetClientSecret() {
    let $resultPromise = /** @type {any} */($Call.ByID(2662411452));
    return $resultPromise;
}

/**
 * @returns {Promise<$models.CurrentlyPlayingTrack | null> & { cancel(): void }}
 */
export function GetCurrentlyPlayingTrack() {
    let $resultPromise = /** @type {any} */($Call.ByID(224975610));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType7($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<spotify$0.PlayerDevice[]> & { cancel(): void }}
 */
export function GetDevices() {
    let $resultPromise = /** @type {any} */($Call.ByID(763227954));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType8($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} showID
 * @returns {Promise<spotify$0.EpisodePage[]> & { cancel(): void }}
 */
export function GetEpisodesByShowID(showID) {
    let $resultPromise = /** @type {any} */($Call.ByID(77304916, showID));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType10($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} query
 * @returns {Promise<spotify$0.SimplePlaylist[]> & { cancel(): void }}
 */
export function GetPlaylistsByQuery(query) {
    let $resultPromise = /** @type {any} */($Call.ByID(1987648749, query));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType12($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<string> & { cancel(): void }}
 */
export function GetRepeatState() {
    let $resultPromise = /** @type {any} */($Call.ByID(1339835261));
    return $resultPromise;
}

/**
 * @param {string} query
 * @returns {Promise<spotify$0.FullShow[]> & { cancel(): void }}
 */
export function GetShowsByQuery(query) {
    let $resultPromise = /** @type {any} */($Call.ByID(4114947090, query));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType14($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} input
 * @param {string} commandId
 * @param {{ [_: string]: string }} parameters
 * @returns {Promise<model$0.SuggestionList> & { cancel(): void }}
 */
export function GetSuggestions(input, commandId, parameters) {
    let $resultPromise = /** @type {any} */($Call.ByID(756502564, input, commandId, parameters));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType15($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} query
 * @returns {Promise<spotify$0.SimpleTrack[]> & { cancel(): void }}
 */
export function GetTracksByQuery(query) {
    let $resultPromise = /** @type {any} */($Call.ByID(613952222, query));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType17($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<number> & { cancel(): void }}
 */
export function GetVolume() {
    let $resultPromise = /** @type {any} */($Call.ByID(2722380857));
    return $resultPromise;
}

/**
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function IsCurrentSongLiked() {
    let $resultPromise = /** @type {any} */($Call.ByID(3094962052));
    return $resultPromise;
}

/**
 * @returns {Promise<boolean> & { cancel(): void }}
 */
export function IsShuffled() {
    let $resultPromise = /** @type {any} */($Call.ByID(4020004694));
    return $resultPromise;
}

/**
 * @param {boolean} like
 * @returns {Promise<void> & { cancel(): void }}
 */
export function LikeCurrentSong(like) {
    let $resultPromise = /** @type {any} */($Call.ByID(1026971542, like));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Next() {
    let $resultPromise = /** @type {any} */($Call.ByID(2406553696));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Pause() {
    let $resultPromise = /** @type {any} */($Call.ByID(2047487349));
    return $resultPromise;
}

/**
 * @param {string} uri
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayAlbum(uri) {
    let $resultPromise = /** @type {any} */($Call.ByID(3608739490, uri));
    return $resultPromise;
}

/**
 * @param {spotify$0.PlayOptions | null} playOptions
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayAnythingToDevice(playOptions) {
    let $resultPromise = /** @type {any} */($Call.ByID(1917496178, playOptions));
    return $resultPromise;
}

/**
 * @param {string} artistID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayArtistsTopTracks(artistID) {
    let $resultPromise = /** @type {any} */($Call.ByID(4284503232, artistID));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayLiked() {
    let $resultPromise = /** @type {any} */($Call.ByID(2697651060));
    return $resultPromise;
}

/**
 * @param {string} uri
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayPlaylist(uri) {
    let $resultPromise = /** @type {any} */($Call.ByID(121314525, uri));
    return $resultPromise;
}

/**
 * @param {string} uri
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayPodcast(uri) {
    let $resultPromise = /** @type {any} */($Call.ByID(3277550313, uri));
    return $resultPromise;
}

/**
 * @param {string} URI
 * @returns {Promise<void> & { cancel(): void }}
 */
export function PlayTrack(URI) {
    let $resultPromise = /** @type {any} */($Call.ByID(3729896154, URI));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Previous() {
    let $resultPromise = /** @type {any} */($Call.ByID(1907008864));
    return $resultPromise;
}

/**
 * @param {string} trackID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function QueueTrack(trackID) {
    let $resultPromise = /** @type {any} */($Call.ByID(1952217479, trackID));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Resume() {
    let $resultPromise = /** @type {any} */($Call.ByID(540699954));
    return $resultPromise;
}

/**
 * @param {number} positionMS
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Seek(positionMS) {
    let $resultPromise = /** @type {any} */($Call.ByID(2184148505, positionMS));
    return $resultPromise;
}

/**
 * @param {string} deviceID
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetActiveDevice(deviceID) {
    let $resultPromise = /** @type {any} */($Call.ByID(3632025171, deviceID));
    return $resultPromise;
}

/**
 * @param {boolean} authenticated
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetAuthenticatedWithSpotify(authenticated) {
    let $resultPromise = /** @type {any} */($Call.ByID(1542059400, authenticated));
    return $resultPromise;
}

/**
 * @param {number} volume
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetVolume(volume) {
    let $resultPromise = /** @type {any} */($Call.ByID(1967324021, volume));
    return $resultPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function ShowWindow() {
    let $resultPromise = /** @type {any} */($Call.ByID(1164627400));
    return $resultPromise;
}

/**
 * @param {boolean} shuffle
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Shuffle(shuffle) {
    let $resultPromise = /** @type {any} */($Call.ByID(1789514038, shuffle));
    return $resultPromise;
}

/**
 * @param {application$0.App | null} app
 * @param {application$0.WebviewWindow | null} window
 * @returns {Promise<void> & { cancel(): void }}
 */
export function StartBackend(app, window) {
    let $resultPromise = /** @type {any} */($Call.ByID(3004063253, app, window));
    return $resultPromise;
}

// Private type creation functions
const $$createType0 = model$0.ExecuteActionOutput.createFrom;
const $$createType1 = spotify$0.PlayerDevice.createFrom;
const $$createType2 = spotify$0.SimpleAlbum.createFrom;
const $$createType3 = $Create.Array($$createType2);
const $$createType4 = spotify$0.FullArtist.createFrom;
const $$createType5 = $Create.Array($$createType4);
const $$createType6 = $models.CurrentlyPlayingTrack.createFrom;
const $$createType7 = $Create.Nullable($$createType6);
const $$createType8 = $Create.Array($$createType1);
const $$createType9 = spotify$0.EpisodePage.createFrom;
const $$createType10 = $Create.Array($$createType9);
const $$createType11 = spotify$0.SimplePlaylist.createFrom;
const $$createType12 = $Create.Array($$createType11);
const $$createType13 = spotify$0.FullShow.createFrom;
const $$createType14 = $Create.Array($$createType13);
const $$createType15 = model$0.SuggestionList.createFrom;
const $$createType16 = spotify$0.SimpleTrack.createFrom;
const $$createType17 = $Create.Array($$createType16);
