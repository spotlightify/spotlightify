// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * Copyright contains the copyright statement associated with an album.
 */
export class Copyright {
    /**
     * Creates a new Copyright instance.
     * @param {Partial<Copyright>} [$$source = {}] - The source object to create the Copyright.
     */
    constructor($$source = {}) {
        if (!("text" in $$source)) {
            /**
             * The copyright text for the album.
             * @member
             * @type {string}
             */
            this["text"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * The type of copyright.
             * @member
             * @type {string}
             */
            this["type"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Copyright instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Copyright}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Copyright(/** @type {Partial<Copyright>} */($$parsedSource));
    }
}

export class EpisodePage {
    /**
     * Creates a new EpisodePage instance.
     * @param {Partial<EpisodePage>} [$$source = {}] - The source object to create the EpisodePage.
     */
    constructor($$source = {}) {
        if (!("audio_preview_url" in $$source)) {
            /**
             * A URL to a 30 second preview (MP3 format) of the episode.
             * @member
             * @type {string}
             */
            this["audio_preview_url"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * A description of the episode.
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("duration_ms" in $$source)) {
            /**
             * The episode length in milliseconds.
             * @member
             * @type {Numeric}
             */
            this["duration_ms"] = (/** @type {Numeric} */(0));
        }
        if (!("explicit" in $$source)) {
            /**
             * Whether or not the episode has explicit content
             * (true = yes it does; false = no it does not OR unknown).
             * @member
             * @type {boolean}
             */
            this["explicit"] = false;
        }
        if (!("external_urls" in $$source)) {
            /**
             * 	External URLs for this episode.
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details of the episode.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * The Spotify ID for the episode.
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("images" in $$source)) {
            /**
             * The cover art for the episode in various sizes, widest first.
             * @member
             * @type {Image[]}
             */
            this["images"] = [];
        }
        if (!("is_externally_hosted" in $$source)) {
            /**
             * True if the episode is hosted outside of Spotify’s CDN.
             * @member
             * @type {boolean}
             */
            this["is_externally_hosted"] = false;
        }
        if (!("is_playable" in $$source)) {
            /**
             * True if the episode is playable in the given market.
             * Otherwise false.
             * @member
             * @type {boolean}
             */
            this["is_playable"] = false;
        }
        if (!("languages" in $$source)) {
            /**
             * A list of the languages used in the episode, identified by their ISO 639 code.
             * @member
             * @type {string[]}
             */
            this["languages"] = [];
        }
        if (!("name" in $$source)) {
            /**
             * The name of the episode.
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("release_date" in $$source)) {
            /**
             * The date the episode was first released, for example
             * "1981-12-15". Depending on the precision, it might
             * be shown as "1981" or "1981-12".
             * @member
             * @type {string}
             */
            this["release_date"] = "";
        }
        if (!("release_date_precision" in $$source)) {
            /**
             * The precision with which release_date value is known:
             * "year", "month", or "day".
             * @member
             * @type {string}
             */
            this["release_date_precision"] = "";
        }
        if (!("resume_point" in $$source)) {
            /**
             * The user’s most recent position in the episode. Set if the
             * supplied access token is a user token and has the scope
             * user-read-playback-position.
             * @member
             * @type {ResumePointObject}
             */
            this["resume_point"] = (new ResumePointObject());
        }
        if (!("show" in $$source)) {
            /**
             * The show on which the episode belongs.
             * @member
             * @type {SimpleShow}
             */
            this["show"] = (new SimpleShow());
        }
        if (!("type" in $$source)) {
            /**
             * The object type: "episode".
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("uri" in $$source)) {
            /**
             * The Spotify URI for the episode.
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new EpisodePage instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {EpisodePage}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType0;
        const $$createField7_0 = $$createType2;
        const $$createField10_0 = $$createType3;
        const $$createField14_0 = $$createType4;
        const $$createField15_0 = $$createType5;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField4_0($$parsedSource["external_urls"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField7_0($$parsedSource["images"]);
        }
        if ("languages" in $$parsedSource) {
            $$parsedSource["languages"] = $$createField10_0($$parsedSource["languages"]);
        }
        if ("resume_point" in $$parsedSource) {
            $$parsedSource["resume_point"] = $$createField14_0($$parsedSource["resume_point"]);
        }
        if ("show" in $$parsedSource) {
            $$parsedSource["show"] = $$createField15_0($$parsedSource["show"]);
        }
        return new EpisodePage(/** @type {Partial<EpisodePage>} */($$parsedSource));
    }
}

/**
 * Followers contains information about the number of people following a
 * particular artist or playlist.
 */
export class Followers {
    /**
     * Creates a new Followers instance.
     * @param {Partial<Followers>} [$$source = {}] - The source object to create the Followers.
     */
    constructor($$source = {}) {
        if (!("total" in $$source)) {
            /**
             * The total number of followers.
             * @member
             * @type {Numeric}
             */
            this["total"] = (/** @type {Numeric} */(0));
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details of the followers,
             * or the empty string if this data is not available.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Followers instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Followers}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Followers(/** @type {Partial<Followers>} */($$parsedSource));
    }
}

/**
 * FullArtist provides extra artist data in addition to what is provided by SimpleArtist.
 */
export class FullArtist {
    /**
     * Creates a new FullArtist instance.
     * @param {Partial<FullArtist>} [$$source = {}] - The source object to create the FullArtist.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("uri" in $$source)) {
            /**
             * The Spotify URI for the artist.
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details of the artist.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("external_urls" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("popularity" in $$source)) {
            /**
             * The popularity of the artist, expressed as an integer between 0 and 100.
             * The artist's popularity is calculated from the popularity of the artist's tracks.
             * @member
             * @type {Numeric}
             */
            this["popularity"] = (/** @type {Numeric} */(0));
        }
        if (!("genres" in $$source)) {
            /**
             * A list of genres the artist is associated with.  For example, "Prog Rock"
             * or "Post-Grunge".  If not yet classified, the slice is empty.
             * @member
             * @type {string[]}
             */
            this["genres"] = [];
        }
        if (!("followers" in $$source)) {
            /**
             * @member
             * @type {Followers}
             */
            this["followers"] = (new Followers());
        }
        if (!("images" in $$source)) {
            /**
             * Images of the artist in various sizes, widest first.
             * @member
             * @type {Image[]}
             */
            this["images"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FullArtist instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {FullArtist}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType0;
        const $$createField6_0 = $$createType3;
        const $$createField7_0 = $$createType6;
        const $$createField8_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField4_0($$parsedSource["external_urls"]);
        }
        if ("genres" in $$parsedSource) {
            $$parsedSource["genres"] = $$createField6_0($$parsedSource["genres"]);
        }
        if ("followers" in $$parsedSource) {
            $$parsedSource["followers"] = $$createField7_0($$parsedSource["followers"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField8_0($$parsedSource["images"]);
        }
        return new FullArtist(/** @type {Partial<FullArtist>} */($$parsedSource));
    }
}

/**
 * FullShow contains full data about a show.
 */
export class FullShow {
    /**
     * Creates a new FullShow instance.
     * @param {Partial<FullShow>} [$$source = {}] - The source object to create the FullShow.
     */
    constructor($$source = {}) {
        if (!("available_markets" in $$source)) {
            /**
             * A list of the countries in which the show can be played,
             * identified by their ISO 3166-1 alpha-2 code.
             * @member
             * @type {string[]}
             */
            this["available_markets"] = [];
        }
        if (!("copyrights" in $$source)) {
            /**
             * The copyright statements of the show.
             * @member
             * @type {Copyright[]}
             */
            this["copyrights"] = [];
        }
        if (!("description" in $$source)) {
            /**
             * A description of the show.
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("explicit" in $$source)) {
            /**
             * Whether or not the show has explicit content
             * (true = yes it does; false = no it does not OR unknown).
             * @member
             * @type {boolean}
             */
            this["explicit"] = false;
        }
        if (!("external_urls" in $$source)) {
            /**
             * Known external URLs for this show.
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details
             * of the show.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * The SpotifyID for the show.
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("images" in $$source)) {
            /**
             * The cover art for the show in various sizes,
             * widest first.
             * @member
             * @type {Image[]}
             */
            this["images"] = [];
        }
        if (!("is_externally_hosted" in $$source)) {
            /**
             * True if all of the show’s episodes are hosted outside
             * of Spotify’s CDN. This field might be null in some cases.
             * @member
             * @type {boolean | null}
             */
            this["is_externally_hosted"] = null;
        }
        if (!("languages" in $$source)) {
            /**
             * A list of the languages used in the show, identified by
             * their ISO 639 code.
             * @member
             * @type {string[]}
             */
            this["languages"] = [];
        }
        if (!("media_type" in $$source)) {
            /**
             * The media type of the show.
             * @member
             * @type {string}
             */
            this["media_type"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * The name of the show.
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("publisher" in $$source)) {
            /**
             * The publisher of the show.
             * @member
             * @type {string}
             */
            this["publisher"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * The object type: “show”.
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("uri" in $$source)) {
            /**
             * The Spotify URI for the show.
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }
        if (!("episodes" in $$source)) {
            /**
             * A list of the show’s episodes.
             * @member
             * @type {SimpleEpisodePage}
             */
            this["episodes"] = (new SimpleEpisodePage());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new FullShow instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {FullShow}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType3;
        const $$createField1_0 = $$createType8;
        const $$createField4_0 = $$createType0;
        const $$createField7_0 = $$createType2;
        const $$createField9_0 = $$createType3;
        const $$createField15_0 = $$createType9;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("available_markets" in $$parsedSource) {
            $$parsedSource["available_markets"] = $$createField0_0($$parsedSource["available_markets"]);
        }
        if ("copyrights" in $$parsedSource) {
            $$parsedSource["copyrights"] = $$createField1_0($$parsedSource["copyrights"]);
        }
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField4_0($$parsedSource["external_urls"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField7_0($$parsedSource["images"]);
        }
        if ("languages" in $$parsedSource) {
            $$parsedSource["languages"] = $$createField9_0($$parsedSource["languages"]);
        }
        if ("episodes" in $$parsedSource) {
            $$parsedSource["episodes"] = $$createField15_0($$parsedSource["episodes"]);
        }
        return new FullShow(/** @type {Partial<FullShow>} */($$parsedSource));
    }
}

/**
 * ID is a base-62 identifier for an artist, track, album, etc.
 * It can be found at the end of a spotify.URI.
 * @typedef {string} ID
 */

/**
 * Image identifies an image associated with an item.
 */
export class Image {
    /**
     * Creates a new Image instance.
     * @param {Partial<Image>} [$$source = {}] - The source object to create the Image.
     */
    constructor($$source = {}) {
        if (!("height" in $$source)) {
            /**
             * The image height, in pixels.
             * @member
             * @type {Numeric}
             */
            this["height"] = (/** @type {Numeric} */(0));
        }
        if (!("width" in $$source)) {
            /**
             * The image width, in pixels.
             * @member
             * @type {Numeric}
             */
            this["width"] = (/** @type {Numeric} */(0));
        }
        if (!("url" in $$source)) {
            /**
             * The source URL of the image.
             * @member
             * @type {string}
             */
            this["url"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Image instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Image}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Image(/** @type {Partial<Image>} */($$parsedSource));
    }
}

/**
 * Numeric is a convenience type for handling numbers sent as either integers or floats.
 * @typedef {number} Numeric
 */

export class PlayOptions {
    /**
     * Creates a new PlayOptions instance.
     * @param {Partial<PlayOptions>} [$$source = {}] - The source object to create the PlayOptions.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * PlaybackContext Spotify URI of the context to play.
             * Valid contexts are albums, artists & playlists.
             * @member
             * @type {URI | null | undefined}
             */
            this["context_uri"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * URIs Array of the Spotify track URIs to play
             * @member
             * @type {URI[] | undefined}
             */
            this["uris"] = [];
        }
        if (/** @type {any} */(false)) {
            /**
             * PlaybackOffset Indicates from where in the context playback should start.
             * Only available when context corresponds to an album or playlist
             * object, or when the URIs parameter is used.
             * @member
             * @type {PlaybackOffset | null | undefined}
             */
            this["offset"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * PositionMs Indicates from what position to start playback.
             * Must be a positive number. Passing in a position that is greater
             * than the length of the track will cause the player to start playing the next song.
             * Defaults to 0, starting a track from the beginning.
             * @member
             * @type {Numeric | undefined}
             */
            this["position_ms"] = (/** @type {Numeric} */(0));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PlayOptions instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PlayOptions}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType10;
        const $$createField2_0 = $$createType12;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("uris" in $$parsedSource) {
            $$parsedSource["uris"] = $$createField1_0($$parsedSource["uris"]);
        }
        if ("offset" in $$parsedSource) {
            $$parsedSource["offset"] = $$createField2_0($$parsedSource["offset"]);
        }
        return new PlayOptions(/** @type {Partial<PlayOptions>} */($$parsedSource));
    }
}

/**
 * PlaybackOffset can be specified either by track URI OR Position. If the
 * Position field is set to a non-nil pointer, it will be taken into
 * consideration when specifying the playback offset. If the Position field is
 * set to a nil pointer, it will be ignored and only the URI will be used to
 * specify the offset. If both are present the request will return 400 BAD
 * REQUEST. If incorrect values are provided for position or uri, the request
 * may be accepted but with an unpredictable resulting action on playback.
 */
export class PlaybackOffset {
    /**
     * Creates a new PlaybackOffset instance.
     * @param {Partial<PlaybackOffset>} [$$source = {}] - The source object to create the PlaybackOffset.
     */
    constructor($$source = {}) {
        if (/** @type {any} */(false)) {
            /**
             * Position is zero based and can’t be negative.
             * @member
             * @type {number | null | undefined}
             */
            this["position"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * URI is a string representing the uri of the item to start at.
             * @member
             * @type {URI | undefined}
             */
            this["uri"] = (/** @type {URI} */(""));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PlaybackOffset instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PlaybackOffset}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PlaybackOffset(/** @type {Partial<PlaybackOffset>} */($$parsedSource));
    }
}

/**
 * PlayerDevice contains information about a device that a user can play music on
 */
export class PlayerDevice {
    /**
     * Creates a new PlayerDevice instance.
     * @param {Partial<PlayerDevice>} [$$source = {}] - The source object to create the PlayerDevice.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * ID of the device. This may be empty.
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("is_active" in $$source)) {
            /**
             * Active If this device is the currently active device.
             * @member
             * @type {boolean}
             */
            this["is_active"] = false;
        }
        if (!("is_restricted" in $$source)) {
            /**
             * Restricted Whether controlling this device is restricted. At present if
             * this is "true" then no Web API commands will be accepted by this device.
             * @member
             * @type {boolean}
             */
            this["is_restricted"] = false;
        }
        if (!("name" in $$source)) {
            /**
             * Name The name of the device.
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * Type of device, such as "Computer", "Smartphone" or "Speaker".
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("volume_percent" in $$source)) {
            /**
             * Volume The current volume in percent.
             * @member
             * @type {Numeric}
             */
            this["volume_percent"] = (/** @type {Numeric} */(0));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PlayerDevice instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PlayerDevice}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PlayerDevice(/** @type {Partial<PlayerDevice>} */($$parsedSource));
    }
}

/**
 * PlaylistTracks contains details about the tracks in a playlist.
 */
export class PlaylistTracks {
    /**
     * Creates a new PlaylistTracks instance.
     * @param {Partial<PlaylistTracks>} [$$source = {}] - The source object to create the PlaylistTracks.
     */
    constructor($$source = {}) {
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint where full details of
             * the playlist's tracks can be retrieved.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("total" in $$source)) {
            /**
             * The total number of tracks in the playlist.
             * @member
             * @type {Numeric}
             */
            this["total"] = (/** @type {Numeric} */(0));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new PlaylistTracks instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {PlaylistTracks}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new PlaylistTracks(/** @type {Partial<PlaylistTracks>} */($$parsedSource));
    }
}

export class ResumePointObject {
    /**
     * Creates a new ResumePointObject instance.
     * @param {Partial<ResumePointObject>} [$$source = {}] - The source object to create the ResumePointObject.
     */
    constructor($$source = {}) {
        if (!("fully_played" in $$source)) {
            /**
             * 	Whether or not the episode has been fully played by the user.
             * @member
             * @type {boolean}
             */
            this["fully_played"] = false;
        }
        if (!("resume_position_ms" in $$source)) {
            /**
             * The user’s most recent position in the episode in milliseconds.
             * @member
             * @type {Numeric}
             */
            this["resume_position_ms"] = (/** @type {Numeric} */(0));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ResumePointObject instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ResumePointObject}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ResumePointObject(/** @type {Partial<ResumePointObject>} */($$parsedSource));
    }
}

/**
 * SimpleAlbum contains basic data about an album.
 */
export class SimpleAlbum {
    /**
     * Creates a new SimpleAlbum instance.
     * @param {Partial<SimpleAlbum>} [$$source = {}] - The source object to create the SimpleAlbum.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * The name of the album.
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("artists" in $$source)) {
            /**
             * A slice of SimpleArtists
             * @member
             * @type {SimpleArtist[]}
             */
            this["artists"] = [];
        }
        if (!("album_group" in $$source)) {
            /**
             * The field is present when getting an artist’s
             * albums. Possible values are “album”, “single”,
             * “compilation”, “appears_on”. Compare to album_type
             * this field represents relationship between the artist
             * and the album.
             * @member
             * @type {string}
             */
            this["album_group"] = "";
        }
        if (!("album_type" in $$source)) {
            /**
             * The type of the album: one of "album",
             * "single", or "compilation".
             * @member
             * @type {string}
             */
            this["album_type"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * The SpotifyID for the album.
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("uri" in $$source)) {
            /**
             * The SpotifyURI for the album.
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }
        if (!("available_markets" in $$source)) {
            /**
             * The markets in which the album is available,
             * identified using ISO 3166-1 alpha-2 country
             * codes.  Note that al album is considered
             * available in a market when at least 1 of its
             * tracks is available in that market.
             * @member
             * @type {string[]}
             */
            this["available_markets"] = [];
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full
             * details of the album.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("images" in $$source)) {
            /**
             * The cover art for the album in various sizes,
             * widest first.
             * @member
             * @type {Image[]}
             */
            this["images"] = [];
        }
        if (!("external_urls" in $$source)) {
            /**
             * Known external URLs for this album.
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("release_date" in $$source)) {
            /**
             * The date the album was first released.  For example, "1981-12-15".
             * Depending on the ReleaseDatePrecision, it might be shown as
             * "1981" or "1981-12". You can use ReleaseDateTime to convert this
             * to a time.Time value.
             * @member
             * @type {string}
             */
            this["release_date"] = "";
        }
        if (!("release_date_precision" in $$source)) {
            /**
             * The precision with which ReleaseDate value is known: "year", "month", or "day"
             * @member
             * @type {string}
             */
            this["release_date_precision"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SimpleAlbum instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SimpleAlbum}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType14;
        const $$createField6_0 = $$createType3;
        const $$createField8_0 = $$createType2;
        const $$createField9_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("artists" in $$parsedSource) {
            $$parsedSource["artists"] = $$createField1_0($$parsedSource["artists"]);
        }
        if ("available_markets" in $$parsedSource) {
            $$parsedSource["available_markets"] = $$createField6_0($$parsedSource["available_markets"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField8_0($$parsedSource["images"]);
        }
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField9_0($$parsedSource["external_urls"]);
        }
        return new SimpleAlbum(/** @type {Partial<SimpleAlbum>} */($$parsedSource));
    }
}

/**
 * SimpleArtist contains basic info about an artist.
 */
export class SimpleArtist {
    /**
     * Creates a new SimpleArtist instance.
     * @param {Partial<SimpleArtist>} [$$source = {}] - The source object to create the SimpleArtist.
     */
    constructor($$source = {}) {
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("uri" in $$source)) {
            /**
             * The Spotify URI for the artist.
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details of the artist.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("external_urls" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SimpleArtist instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SimpleArtist}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField4_0($$parsedSource["external_urls"]);
        }
        return new SimpleArtist(/** @type {Partial<SimpleArtist>} */($$parsedSource));
    }
}

/**
 * SimpleEpisodePage contains EpisodePage returned by the Web API.
 */
export class SimpleEpisodePage {
    /**
     * Creates a new SimpleEpisodePage instance.
     * @param {Partial<SimpleEpisodePage>} [$$source = {}] - The source object to create the SimpleEpisodePage.
     */
    constructor($$source = {}) {
        if (!("href" in $$source)) {
            /**
             * A link to the Web API Endpoint returning the full
             * result of this request.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("limit" in $$source)) {
            /**
             * The maximum number of items in the response, as set
             * in the query (or default value if unset).
             * @member
             * @type {Numeric}
             */
            this["limit"] = (/** @type {Numeric} */(0));
        }
        if (!("offset" in $$source)) {
            /**
             * The offset of the items returned, as set in the query
             * (or default value if unset).
             * @member
             * @type {Numeric}
             */
            this["offset"] = (/** @type {Numeric} */(0));
        }
        if (!("total" in $$source)) {
            /**
             * The total number of items available to return.
             * @member
             * @type {Numeric}
             */
            this["total"] = (/** @type {Numeric} */(0));
        }
        if (!("next" in $$source)) {
            /**
             * The URL to the next page of items (if available).
             * @member
             * @type {string}
             */
            this["next"] = "";
        }
        if (!("previous" in $$source)) {
            /**
             * The URL to the previous page of items (if available).
             * @member
             * @type {string}
             */
            this["previous"] = "";
        }
        if (!("items" in $$source)) {
            /**
             * @member
             * @type {EpisodePage[]}
             */
            this["items"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SimpleEpisodePage instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SimpleEpisodePage}
     */
    static createFrom($$source = {}) {
        const $$createField6_0 = $$createType16;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("items" in $$parsedSource) {
            $$parsedSource["items"] = $$createField6_0($$parsedSource["items"]);
        }
        return new SimpleEpisodePage(/** @type {Partial<SimpleEpisodePage>} */($$parsedSource));
    }
}

/**
 * SimplePlaylist contains basic info about a Spotify playlist.
 */
export class SimplePlaylist {
    /**
     * Creates a new SimplePlaylist instance.
     * @param {Partial<SimplePlaylist>} [$$source = {}] - The source object to create the SimplePlaylist.
     */
    constructor($$source = {}) {
        if (!("collaborative" in $$source)) {
            /**
             * Indicates whether the playlist owner allows others to modify the playlist.
             * Note: only non-collaborative playlists are currently returned by Spotify's Web API.
             * @member
             * @type {boolean}
             */
            this["collaborative"] = false;
        }
        if (!("description" in $$source)) {
            /**
             * The playlist description. Empty string if no description is set.
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("external_urls" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details of the playlist.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("images" in $$source)) {
            /**
             * The playlist image.  Note: this field is only  returned for modified,
             * verified playlists. Otherwise the slice is empty.  If returned, the source
             * URL for the image is temporary and will expire in less than a day.
             * @member
             * @type {Image[]}
             */
            this["images"] = [];
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("owner" in $$source)) {
            /**
             * @member
             * @type {User}
             */
            this["owner"] = (new User());
        }
        if (!("public" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["public"] = false;
        }
        if (!("snapshot_id" in $$source)) {
            /**
             * The version identifier for the current playlist. Can be supplied in other
             * requests to target a specific playlist version.
             * @member
             * @type {string}
             */
            this["snapshot_id"] = "";
        }
        if (!("tracks" in $$source)) {
            /**
             * A collection to the Web API endpoint where full details of the playlist's
             * tracks can be retrieved, along with the total number of tracks in the playlist.
             * @member
             * @type {PlaylistTracks}
             */
            this["tracks"] = (new PlaylistTracks());
        }
        if (!("uri" in $$source)) {
            /**
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SimplePlaylist instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SimplePlaylist}
     */
    static createFrom($$source = {}) {
        const $$createField2_0 = $$createType0;
        const $$createField5_0 = $$createType2;
        const $$createField7_0 = $$createType17;
        const $$createField10_0 = $$createType18;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField2_0($$parsedSource["external_urls"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField5_0($$parsedSource["images"]);
        }
        if ("owner" in $$parsedSource) {
            $$parsedSource["owner"] = $$createField7_0($$parsedSource["owner"]);
        }
        if ("tracks" in $$parsedSource) {
            $$parsedSource["tracks"] = $$createField10_0($$parsedSource["tracks"]);
        }
        return new SimplePlaylist(/** @type {Partial<SimplePlaylist>} */($$parsedSource));
    }
}

/**
 * SimpleShow contains basic data about a show.
 */
export class SimpleShow {
    /**
     * Creates a new SimpleShow instance.
     * @param {Partial<SimpleShow>} [$$source = {}] - The source object to create the SimpleShow.
     */
    constructor($$source = {}) {
        if (!("available_markets" in $$source)) {
            /**
             * A list of the countries in which the show can be played,
             * identified by their ISO 3166-1 alpha-2 code.
             * @member
             * @type {string[]}
             */
            this["available_markets"] = [];
        }
        if (!("copyrights" in $$source)) {
            /**
             * The copyright statements of the show.
             * @member
             * @type {Copyright[]}
             */
            this["copyrights"] = [];
        }
        if (!("description" in $$source)) {
            /**
             * A description of the show.
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("explicit" in $$source)) {
            /**
             * Whether or not the show has explicit content
             * (true = yes it does; false = no it does not OR unknown).
             * @member
             * @type {boolean}
             */
            this["explicit"] = false;
        }
        if (!("external_urls" in $$source)) {
            /**
             * Known external URLs for this show.
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details
             * of the show.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * The SpotifyID for the show.
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("images" in $$source)) {
            /**
             * The cover art for the show in various sizes,
             * widest first.
             * @member
             * @type {Image[]}
             */
            this["images"] = [];
        }
        if (!("is_externally_hosted" in $$source)) {
            /**
             * True if all of the show’s episodes are hosted outside
             * of Spotify’s CDN. This field might be null in some cases.
             * @member
             * @type {boolean | null}
             */
            this["is_externally_hosted"] = null;
        }
        if (!("languages" in $$source)) {
            /**
             * A list of the languages used in the show, identified by
             * their ISO 639 code.
             * @member
             * @type {string[]}
             */
            this["languages"] = [];
        }
        if (!("media_type" in $$source)) {
            /**
             * The media type of the show.
             * @member
             * @type {string}
             */
            this["media_type"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * The name of the show.
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("publisher" in $$source)) {
            /**
             * The publisher of the show.
             * @member
             * @type {string}
             */
            this["publisher"] = "";
        }
        if (!("type" in $$source)) {
            /**
             * The object type: “show”.
             * @member
             * @type {string}
             */
            this["type"] = "";
        }
        if (!("uri" in $$source)) {
            /**
             * The Spotify URI for the show.
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SimpleShow instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SimpleShow}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType3;
        const $$createField1_0 = $$createType8;
        const $$createField4_0 = $$createType0;
        const $$createField7_0 = $$createType2;
        const $$createField9_0 = $$createType3;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("available_markets" in $$parsedSource) {
            $$parsedSource["available_markets"] = $$createField0_0($$parsedSource["available_markets"]);
        }
        if ("copyrights" in $$parsedSource) {
            $$parsedSource["copyrights"] = $$createField1_0($$parsedSource["copyrights"]);
        }
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField4_0($$parsedSource["external_urls"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField7_0($$parsedSource["images"]);
        }
        if ("languages" in $$parsedSource) {
            $$parsedSource["languages"] = $$createField9_0($$parsedSource["languages"]);
        }
        return new SimpleShow(/** @type {Partial<SimpleShow>} */($$parsedSource));
    }
}

/**
 * SimpleTrack contains basic info about a track.
 */
export class SimpleTrack {
    /**
     * Creates a new SimpleTrack instance.
     * @param {Partial<SimpleTrack>} [$$source = {}] - The source object to create the SimpleTrack.
     */
    constructor($$source = {}) {
        if (!("album" in $$source)) {
            /**
             * @member
             * @type {SimpleAlbum}
             */
            this["album"] = (new SimpleAlbum());
        }
        if (!("artists" in $$source)) {
            /**
             * @member
             * @type {SimpleArtist[]}
             */
            this["artists"] = [];
        }
        if (!("available_markets" in $$source)) {
            /**
             * A list of the countries in which the track can be played,
             * identified by their ISO 3166-1 alpha-2 codes.
             * @member
             * @type {string[]}
             */
            this["available_markets"] = [];
        }
        if (!("disc_number" in $$source)) {
            /**
             * The disc number (usually 1 unless the album consists of more than one disc).
             * @member
             * @type {Numeric}
             */
            this["disc_number"] = (/** @type {Numeric} */(0));
        }
        if (!("duration_ms" in $$source)) {
            /**
             * The length of the track, in milliseconds.
             * @member
             * @type {Numeric}
             */
            this["duration_ms"] = (/** @type {Numeric} */(0));
        }
        if (!("explicit" in $$source)) {
            /**
             * Whether or not the track has explicit lyrics.
             * true => yes, it does; false => no, it does not.
             * @member
             * @type {boolean}
             */
            this["explicit"] = false;
        }
        if (!("external_urls" in $$source)) {
            /**
             * External URLs for this track.
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("external_ids" in $$source)) {
            /**
             * ExternalIDs are IDs for this track in other databases
             * @member
             * @type {TrackExternalIDs}
             */
            this["external_ids"] = (new TrackExternalIDs());
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint providing full details for this track.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {ID}
             */
            this["id"] = (/** @type {ID} */(""));
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("preview_url" in $$source)) {
            /**
             * A URL to a 30 second preview (MP3) of the track.
             * @member
             * @type {string}
             */
            this["preview_url"] = "";
        }
        if (!("track_number" in $$source)) {
            /**
             * The number of the track.  If an album has several
             * discs, the track number is the number on the specified
             * DiscNumber.
             * @member
             * @type {Numeric}
             */
            this["track_number"] = (/** @type {Numeric} */(0));
        }
        if (!("uri" in $$source)) {
            /**
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }
        if (!("type" in $$source)) {
            /**
             * Type of the track
             * @member
             * @type {string}
             */
            this["type"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SimpleTrack instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SimpleTrack}
     */
    static createFrom($$source = {}) {
        const $$createField0_0 = $$createType19;
        const $$createField1_0 = $$createType14;
        const $$createField2_0 = $$createType3;
        const $$createField6_0 = $$createType0;
        const $$createField7_0 = $$createType20;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("album" in $$parsedSource) {
            $$parsedSource["album"] = $$createField0_0($$parsedSource["album"]);
        }
        if ("artists" in $$parsedSource) {
            $$parsedSource["artists"] = $$createField1_0($$parsedSource["artists"]);
        }
        if ("available_markets" in $$parsedSource) {
            $$parsedSource["available_markets"] = $$createField2_0($$parsedSource["available_markets"]);
        }
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField6_0($$parsedSource["external_urls"]);
        }
        if ("external_ids" in $$parsedSource) {
            $$parsedSource["external_ids"] = $$createField7_0($$parsedSource["external_ids"]);
        }
        return new SimpleTrack(/** @type {Partial<SimpleTrack>} */($$parsedSource));
    }
}

export class TrackExternalIDs {
    /**
     * Creates a new TrackExternalIDs instance.
     * @param {Partial<TrackExternalIDs>} [$$source = {}] - The source object to create the TrackExternalIDs.
     */
    constructor($$source = {}) {
        if (!("isrc" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["isrc"] = "";
        }
        if (!("ean" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ean"] = "";
        }
        if (!("upc" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["upc"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new TrackExternalIDs instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {TrackExternalIDs}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new TrackExternalIDs(/** @type {Partial<TrackExternalIDs>} */($$parsedSource));
    }
}

/**
 * URI identifies an artist, album, track, or category.  For example,
 * spotify:track:6rqhFgbbKwnb9MLmUQDhG6
 * @typedef {string} URI
 */

/**
 * User contains the basic, publicly available information about a Spotify user.
 */
export class User {
    /**
     * Creates a new User instance.
     * @param {Partial<User>} [$$source = {}] - The source object to create the User.
     */
    constructor($$source = {}) {
        if (!("display_name" in $$source)) {
            /**
             * The name displayed on the user's profile.
             * Note: Spotify currently fails to populate
             * this field when querying for a playlist.
             * @member
             * @type {string}
             */
            this["display_name"] = "";
        }
        if (!("external_urls" in $$source)) {
            /**
             * Known public external URLs for the user.
             * @member
             * @type {{ [_: string]: string }}
             */
            this["external_urls"] = {};
        }
        if (!("followers" in $$source)) {
            /**
             * Information about followers of the user.
             * @member
             * @type {Followers}
             */
            this["followers"] = (new Followers());
        }
        if (!("href" in $$source)) {
            /**
             * A link to the Web API endpoint for this user.
             * @member
             * @type {string}
             */
            this["href"] = "";
        }
        if (!("id" in $$source)) {
            /**
             * The Spotify user ID for the user.
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("images" in $$source)) {
            /**
             * The user's profile image.
             * @member
             * @type {Image[]}
             */
            this["images"] = [];
        }
        if (!("uri" in $$source)) {
            /**
             * The Spotify URI for the user.
             * @member
             * @type {URI}
             */
            this["uri"] = (/** @type {URI} */(""));
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new User instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {User}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType0;
        const $$createField2_0 = $$createType6;
        const $$createField5_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("external_urls" in $$parsedSource) {
            $$parsedSource["external_urls"] = $$createField1_0($$parsedSource["external_urls"]);
        }
        if ("followers" in $$parsedSource) {
            $$parsedSource["followers"] = $$createField2_0($$parsedSource["followers"]);
        }
        if ("images" in $$parsedSource) {
            $$parsedSource["images"] = $$createField5_0($$parsedSource["images"]);
        }
        return new User(/** @type {Partial<User>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = Image.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = $Create.Array($Create.Any);
const $$createType4 = ResumePointObject.createFrom;
const $$createType5 = SimpleShow.createFrom;
const $$createType6 = Followers.createFrom;
const $$createType7 = Copyright.createFrom;
const $$createType8 = $Create.Array($$createType7);
const $$createType9 = SimpleEpisodePage.createFrom;
const $$createType10 = $Create.Array($Create.Any);
const $$createType11 = PlaybackOffset.createFrom;
const $$createType12 = $Create.Nullable($$createType11);
const $$createType13 = SimpleArtist.createFrom;
const $$createType14 = $Create.Array($$createType13);
const $$createType15 = EpisodePage.createFrom;
const $$createType16 = $Create.Array($$createType15);
const $$createType17 = User.createFrom;
const $$createType18 = PlaylistTracks.createFrom;
const $$createType19 = SimpleAlbum.createFrom;
const $$createType20 = TrackExternalIDs.createFrom;
